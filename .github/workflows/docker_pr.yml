name: Docker

on:
  pull_request:
    paths:
      - ".github/workflows/docker_pr.yml"
      - "docker/**"

env:
  AWS_ROLE_TO_ASSUME: arn:aws:iam::639303875316:role/Create-IAM-Role-for-Configure-AWS-Credentials-Role-1NF1LWROB80QG

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write

jobs:
  start-runner-d:
    name: ec2-start-d
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions
          aws-region: us-east-2
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.WUTAO_PAT }}
          ec2-image-id: ami-05a99cf0eb100c377
          ec2-instance-type: c5.4xlarge
          subnet-id: subnet-59743123
          security-group-id: sg-9ec32bfe
  stop-runner-d:
    name: ec2-stop-d
    needs:
      - start-runner-d
      - build_docker_images
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.WUTAO_PAT }}
          label: ${{ needs.start-runner-d.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner-d.outputs.ec2-instance-id }}
        if: ${{ always() }}
  build_docker_images:
    runs-on: ${{ needs.start-runner-d.outputs.label }}
    container:
      image: public.ecr.aws/x5u3w5h6/risingwave-build-env:latest
      options: -v /var/run/docker.sock:/var/run/docker.sock --security-opt seccomp=unconfined
    timeout-minutes: 60
    needs:
      - start-runner-d
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Docker
        run: |
          apt-get update -yy
          apt-get install \
            ca-certificates \
            curl \
            gnupg \
            lsb-release -yy
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -yy
          apt-get install docker-ce-cli -yy
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d)"
      - name: Build risingwave
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: risingwave
          push: false
          tags: ghcr.io/singularity-data/risingwave:latest,ghcr.io/singularity-data/risingwave:nightly-${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max,compression=uncompressed
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      # All below steps will re-use the previous docker cache, so no actual build will happen.
      - name: Build compute-node
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: compute-node
          push: false
          tags: ghcr.io/singularity-data/compute-node:latest,ghcr.io/singularity-data/compute-node:nightly-${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=inline
      - name: Build meta-node
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: meta-node
          push: false
          tags: ghcr.io/singularity-data/meta-node:latest,ghcr.io/singularity-data/meta-node:nightly-${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=inline
      - name: Build frontend-node
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: frontend-node
          push: false
          tags: ghcr.io/singularity-data/frontend-node:latest,ghcr.io/singularity-data/frontend-node:nightly-${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=inline
      - name: Build compactor
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          target: compactor-node
          push: false
          tags: ghcr.io/singularity-data/compactor-node:latest,ghcr.io/singularity-data/compactor-node:nightly-${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=inline
